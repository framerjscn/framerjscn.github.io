<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 教程 | Framer 中文网]]></title>
  <link href="http://framerjscn.github.io/blog/categories/jiao-cheng/atom.xml" rel="self"/>
  <link href="http://framerjscn.github.io/"/>
  <updated>2014-09-04T16:13:13+08:00</updated>
  <id>http://framerjscn.github.io/</id>
  <author>
    <name><![CDATA[Framer 中文翻译团队]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[安装 Framer.JS]]></title>
    <link href="http://framerjscn.github.io/blog/2014/09/03/Install/"/>
    <updated>2014-09-03T23:27:32+08:00</updated>
    <id>http://framerjscn.github.io/blog/2014/09/03/Install</id>
    <content type="html"><![CDATA[<p>一切，从下载 Framer 开始。</p>

<p>打开 index.html 文件可以查看默认原型——一个随点击弹性跳动的 Logo。想要为原型增加交互或者动画，可以在代码编辑器中编辑 app.js，来试试给 imageLayer 这个层添加一个状态吧：</p>

<pre><code>fifth: { y:200, scale:0.8, rotationZ:200, blur:2 }
</code></pre>

<p>imageLayer 层将在第四次点击的时候产生移动、旋转及布尔运算效果。</p>

<p>注意：Framer在 WebKit 引擎下效果最佳，所以官方推荐使用 Safari 浏览器。Chrome 等浏览器也可以运行，但由于 Blink 引擎的关系，有些效果显示并不完美。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[生成器]]></title>
    <link href="http://framerjscn.github.io/blog/2014/09/03/generator/"/>
    <updated>2014-09-03T14:17:20+08:00</updated>
    <id>http://framerjscn.github.io/blog/2014/09/03/generator</id>
    <content type="html"><![CDATA[<h2>生成器</h2>

<p>Framer 生成器可以导入一个打开的 Sketch 或 Photoshop 文件。只有合并成组合（Group）的图层会被导入，而单个图层则会被自动忽略，同时导入后的效果依然遵从原始的图层层级。</p>

<p>修改 Sketch 或 Photoshop 文件后，依然可以方便地重新导入到 Framer。生成器将会自动更新图片以及他们的层级，并且保持你的代码完好。</p>

<p>你的层将默认被导入到 myLayers 对象下。
Framer 允许通过组合名访问图层：myLayers.object。
Sketch 和 PS 组合中的组合将作为次级层导入。
Sketch 和 PS 中有矢量元素的组合导入后将自动允许裁剪。
Sketch 和 PS 中组合的名字必须是唯一的，否则导入时 Framer 将会重命名它们。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoffeeScript]]></title>
    <link href="http://framerjscn.github.io/blog/2014/09/02/coffeescript/"/>
    <updated>2014-09-02T14:43:54+08:00</updated>
    <id>http://framerjscn.github.io/blog/2014/09/02/coffeescript</id>
    <content type="html"><![CDATA[<p>本节内容主要介绍 CoffeeScript 的基本语法，或者当做备忘录来使用。通过以下内容，不仅专注于 Framer Studio 的设计师，其他任何想要学习 CoffeeScript 的人都可以在段时间内掌握这门语言。</p>

<p><strong>值得学习 CoffeeScript 的理由：</strong></p>

<p>1.简介易读的语法，容易学习和上手。
2.帮助开发者避开 Javascript 的困难部分。
3.可使用快捷键进行高效工作。</p>

<!--more-->


<h2>基本语法</h2>

<h3>注释</h3>

<p>注释使用前缀#来表示这不是实际的代码，开发者通常使用注释以说明附近代码的具体功能。</p>

<pre><code># I am a comment
5 + 6 # I am a comment too
</code></pre>

<h3>打印与输出</h3>

<p>开发者可以通过将变量打印出来以检验代码的正确性。</p>

<pre><code>console.log "Hello" # Output: Hello
console.log "Hello", "World" # Output: Hello World
</code></pre>

<h3>空格</h3>

<p>CoffeeScript 对空格和 Tab 是敏感的，它们被用来代替 Javascript 中的 { 和 } ，这意味着如果代码中的空格和 tab 不正确，程序将会出错。</p>

<pre><code>if 1 + 1 == 2
    console.log "hello" # This will work

if 1 + 1 == 2
console.log "hello" # This will fail (missing tab)
</code></pre>

<h3>变量</h3>

<p>变量是一个带有名称的容器，用来存储数据和信息，它的用法非常简单：</p>

<pre><code>myVariable = 1
</code></pre>

<p>上述例子中的变量 myVariable 中包含了数据 1，开发者也可以为其分配任意的其他值。</p>

<p>倘若一个变量没有赋值，则其会返回一个特殊值 ’undefined’ ，因此当程序报错 undefined 时，很有可能是开发者正在使用一个实际还不存在（未赋值）的变量。</p>

<p>通过后面的内容，我们将看到变量可以存储各种不同类型的数据。</p>

<h2>数据类型</h2>

<h3>布尔型数据</h3>

<p>每一个布尔型数据只有两种值：false 或 true：</p>

<pre><code>myBoolA = true
myBoolB = false
</code></pre>

<h3>数</h3>

<p>数可以是整数、小数等，当然还包括正数和负数。</p>

<pre><code>myNumberA = 2
myNumberB = 20.0
myNumberC = -223894
</code></pre>

<p>数可以直接进行各种运算，比如：</p>

<pre><code>myNumberA + myNumberB  # Add, output: 22.0
myNumberA / myNumberB  # Divide, output: 0.10
myNumberA * myNumberB  # Product, output: 40.0
myNumberA ** myNumberB # Power, output: 400.0
</code></pre>

<h3>字符串</h3>

<p>字符串是一系列字母的集合，它可以是一个单词，也可以是一个完整的句子：</p>

<pre><code>myStringA = "Hello there”
</code></pre>

<p>开发者可以将字符串进行组合：</p>

<pre><code>myStringB = "#{myStringA}, I am the dude"
# Output: "Hello there, I am the dude"
</code></pre>

<p>字符串还存放许多通过数没法表达的数据：</p>

<pre><code>myStringC = "rgba(255,0,0,0.1)"
myStringD = "1px solid #FFFFFF”
</code></pre>

<h3>数组</h3>

<p>数组用于存放一系列有顺序的数据（支持各种数据类型），与其他语言一样，CoffeeScript 也支持多维数组（即由数组组成的数组）。</p>

<pre><code>myListA = [1, 2, 3, 4, 5] # Just numbers
myListB = [1, "test", 22, [1, 2, 3]] # Mixed
</code></pre>

<p>开发者可以通过编号（索引）来定位数组中的任一数据，编号从 0 开始。</p>

<pre><code>myListA[0] # Output: 1
myListA[4] # Output: 5
</code></pre>

<p>开发者也可以通过自带的函数统计数组的长度：</p>

<pre><code>myListB.length # Output: 4
</code></pre>

<p>或者获取某一编号范围内的数据：
    myListB[0..2] # Output: [1, 2, 3]</p>

<h3>对象</h3>

<p>对象与列表有些类似，区别则在于除了通过编号索引以外，对象还可以通过字符串来进行索引。（译者注：键值对）</p>

<pre><code>myObjectA = {name:"Framer", age:12}
</code></pre>

<p>也可以通过下面的方式来创建对象，这和上述方法是等效的：</p>

<pre><code>myObjectA =
    name: "Framer"
    age: 12
</code></pre>

<p>通过关键词索引数据：</p>

<pre><code>myObjectB["name"] # Output: “Framer"
</code></pre>

<p>如果所使用的关键词不存在，则会返回 undefined：</p>

<pre><code>myObjectB["nothere"] # Output: undefined
</code></pre>

<p>一旦开发者创建了一个对象，也可以为其增添新的内容：</p>

<pre><code>myObjectB["platform"] = “Mac"
</code></pre>

<p>当然你也可以移除一些内容：</p>

<pre><code>delete myObjectB["platform"]
myObjectB["platform"] # Output: undefined
</code></pre>

<h2>函数</h2>

<p>函数是一整块的可执行代码，顾名思义，它的功能和数学中的函数非常类似——接收输入，产生输出。函数的运行称为『调用』，而函数的输入称为『参数』。</p>

<p>什么情况下我们需要使用函数：</p>

<p>1.描述一个任务，但是只在需要的时候调用它
2.将那些不断重复的工作归入一个函数中，方便开发者对其反复调用</p>

<p>下面的例子介绍了如何定义一个函数，其方式与定义变量非常类似。关键词 return 将一个值传给函数的调用者（默认情况下，CoffeeScript 将返回最后一个被使用的变量）。</p>

<pre><code>myFunction = (input) -&gt; 
    output = input * 2
    return output
</code></pre>

<p>调用函数，并且将 42 作为参数传入：</p>

<pre><code>myFunction(42) # Output: 84
</code></pre>

<p>开发者还可以将函数的输出直接赋值给一个新的变量：</p>

<pre><code>myCalculatedNumber = myFunction(42)
myCalculatedNumber # Output: 84
</code></pre>

<p>当然，函数可以定义一些列不同类型的参数：</p>

<pre><code>myFunction = (argumentA, argumentB, argumentC) -&gt;
    return argumentA + argumentB + argumentC
</code></pre>

<h3>比较器</h3>

<p>比较器用来比较数据，如常用的等于、大于、小于等。</p>

<pre><code>4 is 4 # Output: true
4 isnt 4 # Output: false
4 &lt; 5 # Output true
4 &gt; 5 # Output false
</code></pre>

<p>开发者可以使用 or 或者 and 来组合比较器：</p>

<pre><code>4 is 4 and 5 &lt; 4 # Output false
4 is 4 or 5 &lt; 4 # Output true
</code></pre>

<h3>条件语句</h3>

<p>条件语句结合比较器，可以用以定义程序逻辑。条件语句的关键词有 if，else if，和 else。</p>

<pre><code>if age &gt; 21
    console.log "Over 21!”
</code></pre>

<p>再来看一个稍复杂一些的例子：</p>

<pre><code>if age &lt; 21
    console.log "Young"
else if age &lt; 65
    console.log "Adult"
else
    console.log “Senior"
</code></pre>

<h3>循环语句</h3>

<p>循环语句用来进行程序中的重复计算，循环体可以是数组或对象。循环关键字为 for。</p>

<p>关于数组循环的例子：</p>

<pre><code>myArray = [1, 2, 3, 4, 5]

for number in myArray
    number + 1

# Output: 2, 3, 4, 5, 6
</code></pre>

<p>一个含有键值对的对象也可以纳入到循环中来，将关键字 in 改为 of 即可：</p>

<pre><code>myObject =
    name: "Koen"
    city: "Amsterdam"
    age: 31

for key, value of myObject
    key, "=", value 

# Output: name=Koen, city=Amsterdam, age=31
</code></pre>

<h2>常见错误</h2>

<p>SyntaxError … unexpected …：编译器遇到一段用途不明的代码（一般可能是语法错误）。</p>

<p>ReferenceError … Can’t find variable …：你正在使用一个编译器不能识别的变量，可能是对其申明有误。</p>

<h2>更多 CoffeeScript 资源</h2>

<p>推荐一些优质的站点，帮助那些希望在 CoffeeScript 上走的更远的设计师和开发者：</p>

<p>Convert any Javascript to CoffeeScript
The official CoffeeScript Site
The Little Book on CoffeeScript
Code School CoffeeScript Course (Paid)</p>
]]></content>
  </entry>
  
</feed>
